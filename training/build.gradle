apply plugin: "java"
apply plugin: "scala"

ext.publish = false
bintray {
  user = bintray_user
  key = bintray_key
  configurations = ['published', 'archives']
  //publications = ['published']
  //filesSpec {
  //  from 'files'
  //  into 'standalone_files/level1'
  // rename '(.+)\\.(.+)', '$1-suffix.$2'
  //}
  publish = project.publish
  pkg {
    repo = 'aerosolve'
    userOrg = 'airbnb'
    name = 'aerosolve-training'
    desc = 'Aerosolve machine learning library training module'
    websiteUrl = 'https://github.com/airbnb/aerosolve'
    issueTrackerUrl = 'https://github.com/airbnb/aerosolve/issues'
    vcsUrl = 'https://github.com/airbnb/aerosolve.git'
    licenses = ['Apache-2.0']
    labels = ['machine learning', 'spark', 'scala']
    attributes= ['plat': ['linux', 'osx']]
    publicDownloadNumbers = true
    version {
      name = currentVersion
      desc = 'Aerosolve training library'
    }
  }
}

dependencies {
  compile project(':core')
  compile 'com.fasterxml.jackson.module:jackson-module-scala_2.10:2.4.2'
  compile 'joda-time:joda-time:2.5'
  compile 'org.apache.hadoop:hadoop-client:2.2.0'

  provided 'org.apache.spark:spark-core_2.10:1.5.2'
  provided 'org.apache.spark:spark-hive_2.10:1.5.2'

  testCompile 'org.apache.spark:spark-core_2.10:1.5.2'
  testCompile 'org.apache.spark:spark-hive_2.10:1.5.2'
  testCompile 'org.mockito:mockito-all:1.9.5'
  testCompile 'org.slf4j:slf4j-simple:1.7.7'
}

compileScala {
  scalaCompileOptions.fork = true
  scalaCompileOptions.forkOptions.jvmArgs = ['-XX:MaxPermSize=512m']
}

shadowJar {
  zip64 = true

  manifest {
    attributes 'Main-Class': 'com.airbnb.aerosolve.training.pipeline.JobRunner'
  }
}

test {
  jvmArgs += [ "-XX:MaxPermSize=1024m" ]
}
