apply plugin: 'wrapper'

// Needed for shadow.
buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
  }
}

import java.text.SimpleDateFormat

def globalVersion = new Version(currentVersion)

allprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'com.github.johnrengelman.shadow'
  apply plugin: 'com.jfrog.bintray'

  repositories {
    jcenter()
    maven { url "http://repo.typesafe.com/typesafe/releases/" }
    maven { url 'http://projectlombok.org/mavenrepo' }
  }

  configurations {
    provided
  }

  group = 'com.airbnb.aerosolve'
  version = globalVersion
  status = version.status

  ext.publish = false

  sourceSets {
      main {
          compileClasspath += configurations.provided
      }
      test {
          compileClasspath += configurations.provided
          runtimeClasspath += configurations.provided
      }
  }

  compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.setDeprecation true
    options.encoding = 'UTF-8'
  }
}

subprojects {
    apply plugin: 'maven'

    if (project.plugins.hasPlugin('java')) {
        // manifest.mainAttributes(provider: 'gradle')
        configurations {
            published
        }
        dependencies {
            testCompile 'junit:junit:4.7'
        }

        task sourceJar(type: Jar) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        // Add the sourceJars to non-extractor modules
        artifacts {
            published sourceJar
            published javadocJar
        }
    }
}

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}